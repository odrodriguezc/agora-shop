# Logstash pipeline for ingesting Filebeat (Docker container logs)
#
# Inputs:
#  - Beats on 5044 (from Filebeat)
#  - Optional GELF on 12201/udp (if containers use GELF logging driver)
#
# Filters:
#  - Parse JSON messages (Rails Lograge emits JSON)
#  - Flatten/rename selected fields for easier querying
#
# Output:
#  - Elasticsearch, with index prefix based on environment (dev/staging/prod)

input {
  beats {
    port => 5044
  }

  # Optional: accept logs directly via Docker GELF driver
  gelf {
    port => 12201
    # host => "0.0.0.0"  # default
  }
}

filter {
  # Attempt to parse the message as JSON. Lograge produces one JSON object per line.
  json {
    source => "message"
    target => "json"
    skip_on_invalid_json => true
  }

  # If JSON was parsed, promote/rename useful fields for top-level visibility
  if [json] {
    mutate {
      rename => {
        "[json][method]"      => "http_method"
        "[json][path]"        => "http_path"
        "[json][status]"      => "http_status"
        "[json][controller]"  => "controller"
        "[json][action]"      => "action"
        "[json][duration]"    => "duration_ms"
        "[json][view]"        => "view_ms"
        "[json][db]"          => "db_ms"
        "[json][params]"      => "params"
        "[json][request_id]"  => "request_id"
        "[json][remote_ip]"   => "remote_ip"
        "[json][ua]"          => "user_agent"
      }
    }

    # # Prefer the Lograge message for the top-level event message, for readability
    # if [json][message] {
    #   mutate {
    #     replace => { "message" => "%{[json][message]}" }
    #   }
    # }

    # # Drop the nested json object to reduce noise (we already promoted fields)
    # mutate {
    #   remove_field => ["json"]
    # }
  }

  # Normalize types
  mutate {
    convert => { "http_status" => "integer" }
  }
}

output {
  elasticsearch {
    hosts  => ["http://elasticsearch:9200"]
    # Index prefix uses env from Filebeat (fields.env) set under fields_under_root
    index  => "rails-%{[env]}-%{+YYYY.MM.dd}"
    action => "create"
  }

  # For debugging: uncomment to see events
  # stdout { codec => rubydebug }
}
